{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","className","src","alt","for","id","type","maxlength","pattern","min","max","Google","client","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+LAmGeA,MA/Ff,WACE,OACE,6BACI,yBAAKC,UAAU,aACX,yBAAKC,IAAI,aAAaC,IAAI,WAC1B,4DAGJ,yBAAKF,UAAU,QACX,8BACI,uBAAGA,UAAU,SAAb,qBACA,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,SACX,2BAAOG,IAAI,OAAX,iBACA,2BAAOC,GAAG,MAAMC,KAAK,OAAOC,UAAU,IAAIC,QAAQ,SAEtD,yBAAKP,UAAU,SACX,2BAAOG,IAAI,OAAX,gBACA,2BAAOC,GAAG,MAAMC,KAAK,SAASG,IAAI,IAAIC,IAAI,SAE9C,yBAAKT,UAAU,SACX,2BAAOG,IAAI,UAAX,iBACA,2BAAOC,GAAG,SAASC,KAAK,SAASG,IAAI,KAAKC,IAAI,SAElD,yBAAKT,UAAU,SACX,2BAAOG,IAAI,UAAX,aACA,2BAAOC,GAAG,SAASC,KAAK,SAASG,IAAI,IAAIC,IAAI,YAM7D,yBAAKT,UAAU,WACX,uBAAGA,UAAU,SAAb,cACA,2BAAOA,UAAU,gBACb,4BACI,wBAAIA,UAAU,cACd,wBAAIA,UAAU,YAAd,YACA,wBAAIA,UAAU,YAAd,uBACA,wBAAIA,UAAU,YAAd,WACA,wBAAIA,UAAU,qBAAd,gCAEJ,4BACI,wBAAIA,UAAU,aAAd,aACA,wBAAIA,UAAU,eACd,6BACA,6BACA,wBAAIA,UAAU,cAElB,4BACI,wBAAIA,UAAU,aAAd,SACA,wBAAIA,UAAU,eACd,6BACA,6BACA,wBAAIA,UAAU,cAElB,4BACI,wBAAIA,UAAU,aAAd,SACA,wBAAIA,UAAU,eACd,6BACA,6BACA,wBAAIA,UAAU,cAElB,4BACI,wBAAIA,UAAU,aAAd,MACA,wBAAIA,UAAU,eACd,6BACA,6BACA,wBAAIA,UAAU,cAElB,4BACI,wBAAIA,UAAU,aAAd,MACA,wBAAIA,UAAU,eACd,6BACA,6BACA,wBAAIA,UAAU,cAElB,4BACI,wBAAIA,UAAU,aAAd,UACA,wBAAIA,UAAU,eACd,6BACA,6BACA,wBAAIA,UAAU,gBAhF9B,MAsFO,kBAAC,IAAQU,OAAT,CACCC,OAAO,4BAvFf,QCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ea0194d9.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport AdSense from 'react-adsense';\n\nfunction App() {\n  return (\n    <div>\n        <div className=\"pageTitle\">\n            <img src=\"./logo.png\" alt=\"pulmao\" />\n            <p>Fisioterapia Respiratória</p> \n        </div>\n\n        <div className=\"data\">\n            <form>\n                <p className=\"title\">Dados do Paciente</p>\n                <div className=\"labelsInputs\">\n                    <div className=\"field\">\n                        <label for=\"sex\">Sexo (M ou F)</label>\n                        <input id=\"sex\" type=\"text\" maxlength=\"1\" pattern=\"M|F\" />\n                    </div>\n                    <div className=\"field\">\n                        <label for=\"age\">Idade (anos)</label>\n                        <input id=\"age\" type=\"number\" min=\"1\" max=\"100\" />\n                    </div>\n                    <div className=\"field\">\n                        <label for=\"height\">Estatura (cm)</label>\n                        <input id=\"height\" type=\"number\" min=\"50\" max=\"250\"/>\n                    </div>\n                    <div className=\"field\">\n                        <label for=\"weight\">Peso (Kg)</label>\n                        <input id=\"weight\" type=\"number\" min=\"1\" max=\"200\"/>\n                    </div>\n                </div>\n            </form>\n        </div>\n\n        <div className=\"results\">\n            <p className=\"title\">Resultados</p>\n            <table className=\"resultsTable\">\n                <tr>\n                    <th className=\"tableLeft\"></th>\n                    <th className=\"tableTop\">Paciente</th>\n                    <th className=\"tableTop\">Alvo Terapêutico</th>\n                    <th className=\"tableTop\">Predito</th>\n                    <th className=\"tableTop tableEnd\">Condições do Paciente</th>\n                </tr>\n                <tr>\n                    <th className=\"tableLeft\">Peak Flow</th>\n                    <td className=\"tableBegin\"></td>\n                    <td></td>\n                    <td></td>\n                    <td className=\"tableEnd\"></td>\n                </tr>\n                <tr>\n                    <th className=\"tableLeft\">PIMax</th>\n                    <td className=\"tableBegin\"></td>\n                    <td></td>\n                    <td></td>\n                    <td className=\"tableEnd\"></td>\n                </tr>\n                <tr>\n                    <th className=\"tableLeft\">PEMax</th>\n                    <td className=\"tableBegin\"></td>\n                    <td></td>\n                    <td></td>\n                    <td className=\"tableEnd\"></td>\n                </tr>\n                <tr>\n                    <th className=\"tableLeft\">CI</th>\n                    <td className=\"tableBegin\"></td>\n                    <td></td>\n                    <td></td>\n                    <td className=\"tableEnd\"></td>\n                </tr>\n                <tr>\n                    <th className=\"tableLeft\">CV</th>\n                    <td className=\"tableBegin\"></td>\n                    <td></td>\n                    <td></td>\n                    <td className=\"tableEnd\"></td>\n                </tr>\n                <tr>\n                    <th className=\"tableLeft\">PIdeal</th>\n                    <td className=\"tableBegin\"></td>\n                    <td></td>\n                    <td></td>\n                    <td className=\"tableEnd\"></td>\n                </tr>\n                \n            </table>\n            \n        </div>\n        /* <AdSense.Google\n            client=\"ca-pub-9684035790566306\"\n        /> */\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}